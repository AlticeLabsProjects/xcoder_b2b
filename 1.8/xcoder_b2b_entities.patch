diff -Naur opensips-1.8.3-tls/modules/b2b_entities/dlg.c b2b_entities/dlg.c
--- opensips-1.8.3-tls/modules/b2b_entities/dlg.c	2013-01-28 15:56:15.000000000 +0000
+++ b2b_entities/dlg.c	2013-10-22 15:46:06.480137126 +0100
@@ -509,7 +509,6 @@
 	}
 	LM_DBG("start - method = %.*s\n", msg->first_line.u.request.method.len,
 		 msg->first_line.u.request.method.s);
-
 	if(msg->route)
 	{
 		LM_DBG("Found route headers\n");
@@ -852,6 +851,188 @@
 		}
 	}
 
+//   /* Begin Jorge modifications
+//    * Check max-forwards header
+//    * Check if a reinvite has fax attributes
+//    * */
+
+	str foo;
+	int x=255, err;
+	if  (msg->maxforwards && parse_headers( msg , HDR_MAXFORWARDS_F, 0 )==-1 )
+	{
+		LM_ERR("Parsing MAX_FORWARD header failed!\n");
+	}
+	if(msg->maxforwards)
+	{
+		trim_len( foo.len , foo.s , msg->maxforwards->body );
+		x = str2s( foo.s,foo.len,&err);
+		if (err)
+		{
+			LM_ERR("unable to parse the max forwards number\n");
+		}
+		else
+		{
+			if(x<=0)
+			{
+				if(method_value==METHOD_ACK)
+				{
+					LM_WARN("Detected Max-forwards=%d in ACK message. Discarding message\n",x);
+					lock_release(&table[hash_index].lock);
+					goto done;
+				}
+
+				LM_WARN("Detected Max-forwards=%d | message = %s. Sending 483 Too Many Hops error response\n",x,msg->buf);
+	            str reason={"Too Many Hops", 13};
+
+	            b2b_rpl_data_t rpl_data;
+	            b2b_dlginfo_t dlginfo;
+	            memset(&rpl_data, 0, sizeof(b2b_rpl_data_t));
+	            memset(&dlginfo,0, sizeof(b2b_dlginfo_t));
+
+	            etype = (table==server_htable?B2B_SERVER:B2B_CLIENT);
+
+	            if(etype==B2B_SERVER)
+	            {
+	               dlginfo.callid = dlg->callid;
+	               dlginfo.fromtag = dlg->tag[CALLER_LEG];
+	               dlginfo.totag = to_tag;
+	            }
+	            else
+	            {
+	               dlginfo.callid = dlg->callid;
+	               dlginfo.fromtag = dlg->tag[CALLEE_LEG];
+	               dlginfo.totag = to_tag;
+	            }
+
+	            rpl_data.et=etype;
+	            rpl_data.b2b_key=&b2b_key;
+	            rpl_data.method =method_value;
+	            rpl_data.code = 483;
+	            rpl_data.text=&reason;
+	            rpl_data.dlginfo=&dlginfo;
+
+	            lock_release(&table[hash_index].lock);
+	            b2b_send_reply(&rpl_data);
+
+	            lock_release(&table[hash_index].lock);
+
+	            goto done;
+			}
+		}
+	}
+	else
+	{
+		LM_DBG("No Max-header found\n");
+	}
+
+
+   if(dlg->fax_status==FAX_ERR_SENDED && method_value == METHOD_ACK)
+   {
+      LM_NOTICE("Found ACK in response of an error due to fax attributes. Exit b2b_modules, call_id=%.*s",callid.len,callid.s);
+      dlg->uas_tran = NULL;
+      set_dlg_state( dlg, method_value);
+      UPDATE_DBFLAG(dlg);
+      lock_release(&table[hash_index].lock);
+      goto done;
+   }
+
+   if((dlg->state == B2B_ESTABLISHED && method_value == METHOD_INVITE) )
+   {
+      LM_INFO("Check if reinvite has fax attributes");
+
+      int tmp=parse_sdp(msg);
+      if (tmp < 0 || tmp==1) //If sdp is not present, parse_sdp returns 1
+      {
+         LM_ERR("Unable to parse sdp");
+         lock_release(&table[hash_index].lock);
+         return -1;
+      }
+
+      struct sdp_info* sdp;
+      if (msg->sdp && msg->sdp->sessions && msg->sdp->sessions->streams)
+         sdp = msg->sdp;
+      else
+      {
+         LM_ERR("Unable to get necessary sdp content");
+         lock_release(&table[hash_index].lock);
+         return -1;
+      }
+
+      struct sdp_session_cell *sessions;
+      sessions = sdp->sessions;
+
+      struct sdp_stream_cell* streams;
+      streams = sessions->streams;
+
+      char media_type[32];  //if size value is changed, change also the next if clause
+      bzero(media_type,32);
+
+      while(streams!=NULL)
+      {
+         if(32 < streams->media.len+1) // if 32 number is changed, change also the size of 'media_type' variable above
+         {
+            LM_ERR("Media type variable ('media_type') is shorter than stream->media\n");
+            streams=streams->next;
+            continue;
+         }
+
+         snprintf(media_type,streams->media.len+1,streams->media.s);
+         LM_INFO("Media type is %s\n",media_type);
+         if(strcmp(media_type,"image")==0)
+         {
+            LM_NOTICE("Found fax attributes in the message. This feature is not yet supported, call_id=%.*s | error_code=%d | reason=%s\n",callid.len,callid.s,606,"Not Acceptable");
+            str reason={"Not Acceptable", 14};
+            dlg->fax_status=FAX_ERR_FOUND;
+
+            b2b_rpl_data_t rpl_data;
+            b2b_dlginfo_t dlginfo;
+            memset(&rpl_data, 0, sizeof(b2b_rpl_data_t));
+            memset(&dlginfo,0, sizeof(b2b_dlginfo_t));
+
+            etype = (table==server_htable?B2B_SERVER:B2B_CLIENT);
+
+            if(etype==B2B_SERVER)
+            {
+               dlginfo.callid = dlg->callid;
+               dlginfo.fromtag = dlg->tag[CALLER_LEG];
+               dlginfo.totag = to_tag;
+            }
+            else
+            {
+               dlginfo.callid = dlg->callid;
+               dlginfo.fromtag = dlg->tag[CALLEE_LEG];
+               dlginfo.totag = to_tag;
+            }
+
+            rpl_data.et=etype;
+            rpl_data.b2b_key=&b2b_key;
+            rpl_data.method =METHOD_INVITE;
+            rpl_data.code = 606;
+            rpl_data.text=&reason;
+            rpl_data.dlginfo=&dlginfo;
+
+            lock_release(&table[hash_index].lock);
+            b2b_send_reply(&rpl_data);
+
+            dlg->fax_status=FAX_ERR_SENDED;
+
+         //       dlg->state= B2B_TERMINATED;
+         //       dlg->uas_tran = NULL;
+         //       dlg->last_reply_code = 606;
+         //       set_dlg_state( dlg, method_value);
+         //       UPDATE_DBFLAG(dlg);
+         //    current_dlg = dlg;
+
+            lock_release(&table[hash_index].lock);
+
+            goto done;
+         }
+         streams=streams->next;
+      }
+   }
+
+//   // End of Jorge modifications
+
 	b2b_cback = dlg->b2b_cback;
 	if(dlg->param.s)
 	{
@@ -1280,8 +1461,9 @@
 	LM_DBG("Send reply %d %.*s, for dlg [%p]->[%.*s]\n", code, tm_tran->method.len,
 			tm_tran->method.s, dlg, b2b_key->len, b2b_key->s);
 
-	if(method_value==METHOD_INVITE &&
-			(dlg->state==B2B_CONFIRMED || dlg->state==B2B_ESTABLISHED))
+   if(method_value==METHOD_INVITE &&
+         (dlg->state==B2B_CONFIRMED || dlg->state==B2B_ESTABLISHED)&&
+         dlg->fax_status!=FAX_ERR_FOUND) //Modified by Jorge, added fax_status verification
 	{
 		LM_DBG("A retransmission of the reply\n");
 		lock_release(&table[hash_index].lock);
@@ -2518,8 +2700,9 @@
 					cseq = msg->cseq->body;
 					trim_trailing(&rseq);
 					trim_trailing(&cseq);
-					sprintf(buf, "RAck: %.*s %.*s\r\n",
-							rseq.len, rseq.s, cseq.len, cseq.s);
+					sprintf(buf, "RAck: %.*s %.*s\r\nMax-Forwards: 70\r\n",
+							rseq.len, rseq.s, cseq.len, cseq.s); //Jorge, added max-forwards
+//					sprintf(buf, "RAck: %.*s %.*s\r\n",rseq.len, rseq.s, cseq.len, cseq.s);
 					extra_headers.s = buf;
 					extra_headers.len = strlen(buf);
 						
diff -Naur opensips-1.8.3-tls/modules/b2b_entities/dlg.h b2b_entities/dlg.h
--- opensips-1.8.3-tls/modules/b2b_entities/dlg.h	2012-03-26 10:05:52.000000000 +0100
+++ b2b_entities/dlg.h	2013-10-22 15:46:06.456146972 +0100
@@ -49,6 +49,7 @@
 
 
 enum b2b_entity_type {B2B_SERVER=0, B2B_CLIENT, B2B_NONE};
+enum fax_error_reply {FAX_NONE=0, FAX_ERR_FOUND=1, FAX_ERR_SENDED=2}; //Added by Jorge
 
 typedef struct b2b_dlginfo
 {
@@ -123,6 +124,7 @@
 	struct socket_info*  send_sock;
 	unsigned int         last_reply_code;
 	int                  db_flag;
+	int                  fax_status;//Added by Jorge; check if b2b receives a request with fax attributes
 }b2b_dlg_t;
 
 typedef struct client_info
