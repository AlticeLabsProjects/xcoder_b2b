--- trunk/src/opensips_1_7/modules/b2b_logic/logic.c	2013-02-20 18:22:03.380687830 +0000
+++ b2b_logic/logic.c	2013-02-20 18:22:18.636687726 +0000
@@ -2059,6 +2059,20 @@
 							replaces_b.to_tag_val.s,
 							replaces_b.from_tag_val.len,
 							replaces_b.from_tag_val.s);
+               //JORGE BEGIN
+               // Modification made to prevent b2b from dropping Refer messages with wrong Refer-To headers
+					LM_INFO("Wrong dialog values found in Refer. Relaying request\n");
+               /* build extra headers */
+               if(b2b_extra_headers(msg, NULL, NULL, &extra_headers)< 0)
+               {
+                LM_ERR("Failed to construct extra headers\n");
+                goto done;
+               }
+
+               ret = b2b_logic_notify_request(src, msg, key, &body, &extra_headers,
+                               b2bl_key, hash_index, local_index);
+               //JORGE END
+
 					goto done;
 				}
 				if(b2bl_parse_key(&tuple_key, &hash_idx,&local_idx)< 0)
@@ -2619,6 +2633,33 @@
 	LM_DBG("Gen from_tag= %s\n", fromtag_buf);
 }
 
+/*******************************************************************************
+*        NAME: Xsnprintf()
+* DESCRIPTION: Allows use of recursion in a snprintf implementation
+******************************************************************************/
+int Xsnprintf(char *dst, size_t size, const char *format, ...)
+{
+  char *tmp;
+  int retval;
+  va_list  pArguments;
+
+  if(dst == NULL || size <= 0)
+     return -1;
+
+  tmp = (char *) malloc(size);
+
+  if(tmp == NULL)
+     return -1;
+
+  va_start(pArguments, format);
+  retval = vsnprintf(tmp, size, format, pArguments);
+  va_end(pArguments);
+
+  memcpy(dst, tmp, size);
+  free(tmp);
+
+  return retval;
+}
 
 str* create_top_hiding_entities(struct sip_msg* msg, b2bl_cback_f cbf,
 		void* cb_param, unsigned int cb_mask, str* custom_hdrs)
@@ -2813,6 +2854,74 @@
 		b2bl_db_insert(tuple);
 	}
 
+	// (JORGE) Get ids and add them in the connections structures
+
+	struct to_body *pfrom;          //Structure contFrom header
+
+	if( parse_from_header( msg ) != 0 )
+	{                    // Parse header FROM
+		LM_ERR("ERROR. Error parsing from header\n");
+		goto error;
+	}
+
+	pfrom = get_from(msg);          //Get structure containing From header
+
+	if(pfrom==NULL)
+	{
+		LM_ERR("Error. pfrom has null value\n");
+		goto error;
+	}
+
+	int len_from_tag = pfrom->tag_value.len+1;
+	int len_callid = msg->callid->body.len+1;
+	int len_b2b_call_ID = client_id->len+1;
+	int len_server_call_ID = server_id->len+1;
+	int len_key = b2bl_key->len+1;
+	int len_from_tag_gen = from_tag_gen.len+1;
+
+	char orig_call_ID[128];
+	bzero(orig_call_ID,128);
+
+	if(client_id->s==NULL || server_id->s==NULL || b2bl_key->s==NULL || from_tag_gen.s==NULL || len_from_tag==0 || len_callid==0)
+	{
+		LM_ERR("ERROR. Null values generated by opensips\n");
+		if(len_callid>0)
+		{
+			Xsnprintf(orig_call_ID,msg->callid->body.len+1,msg->callid->body.s);
+			b2b_xcoder.free_xcoder_resources(orig_call_ID);
+		}
+		goto error;
+	}
+
+	if(len_from_tag>128 || len_callid>128 || len_b2b_call_ID>128 || len_server_call_ID>128 || len_key>128 || len_from_tag_gen>128)
+	{
+		LM_ERR("Value higher than acceptable size.len_from_tag %d | len_callid %d | len_b2b_call_ID %d | len_server_call_ID %d | len_key %d | len_from_tag_gen %d\n",
+				len_from_tag,len_callid,len_b2b_call_ID,len_server_call_ID,len_key,len_from_tag_gen);
+		goto error;
+	}
+
+	char from_tag[128]; bzero(from_tag,128);
+	Xsnprintf(from_tag,pfrom->tag_value.len+1,pfrom->tag_value.s);
+
+	char b2b_call_ID[128];
+	char b2b_server_call_ID[128];
+	char b2b_key[128];
+	char b2b_from_tag_gen[128];
+	bzero(b2b_call_ID,128);
+	bzero(b2b_server_call_ID,128);
+	bzero(b2b_key,128);
+	bzero(b2b_from_tag_gen,128);
+
+	Xsnprintf(orig_call_ID,msg->callid->body.len+1,msg->callid->body.s);
+	Xsnprintf(b2b_call_ID,client_id->len+1,client_id->s);
+	Xsnprintf(b2b_server_call_ID,server_id->len+1,server_id->s);
+	Xsnprintf(b2b_key,b2bl_key->len+1,b2bl_key->s);
+	Xsnprintf(b2b_from_tag_gen,from_tag_gen.len+1,from_tag_gen.s);
+
+	b2b_xcoder.add_b2b_callID(orig_call_ID,b2b_call_ID,b2b_server_call_ID,b2b_key,from_tag,b2b_from_tag_gen);
+
+	// End of (JORGE) modifications
+
 	lock_release(&b2bl_htable[hash_index].lock);
 
 	pkg_free(to_uri.s);
